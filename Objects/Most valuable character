//https://www.codewars.com/kata/5dd5128f16eced000e4c42ba/train/javascript

//In this Kata, you will be given a string and your task is to return the most valuable character. The value of a character is the difference between the index of its last occurrence and the index of its first occurrence. Return the character that has the highest value. If there is a tie, return the alphabetically lowest character. [For Golang return rune]

//All inputs will be lower case.

//For example:
//solve('a') = 'a'
//solve('ab') = 'a'. Last occurrence is equal to first occurrence of each character. Return lexicographically lowest.
//solve("axyzxyz") = 'x'

*********************************************************
Solution 1 (with for of loop):

function solve(str) {
  let maxDiff = 0, result = 'z';
  for (let el of str) {
    let diff = str.lastIndexOf(el) - str.indexOf(el);
      if (maxDiff < diff || maxDiff == diff && el <= result) {
        result = el;
        maxDiff = diff;
      }
    }
  return result;
}

Solution 2 (using loop in objects)
********************************************************************************
function solve(str) {
  let map = {},
    arr = str.split(''),
    max = 0;
  
  for (let char of arr)
    if (!map[char])
      map[char] = arr.lastIndexOf(char) - arr.indexOf(char);
  
  max = Math.max(...Object.values(map));
  map = Object.keys(map).sort().reduce((r, k) => (r[k] = map[k], r), {});
  return Object.keys(map).find(key => map[key] === max);
}
